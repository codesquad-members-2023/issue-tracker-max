name: issue-tracker auto deploy

on:
  pull_request:
    branches: [ "release" ]


permissions:
  contents: read

env:
  BE_WORKING_DIR: ./be
  FE_WORKING_DIR: ./fe
  NGINX_WORKING_DIR: ./nginx
  APPLICATION_PROPERTIES_FILE_PATH: ./src/main/resources/application.yml

jobs:

  # Job[1]: BACKEND -> docker hub로 build & push
  be-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.BE_WORKING_DIR }}
    steps:

      # 1. Source 단계
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # JDK 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # 2. yml 파일 변경
      - name: Change Spring Active Profile
        run: |
          touch '${{ env.APPLICATION_PROPERTIES_FILE_PATH }}'
          echo '${{ secrets.APPLICATION }}' > '${{ env.APPLICATION_PROPERTIES_FILE_PATH }}'

      # 3. build 단계
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test # 인바운드 IP 설정할 수 있으면 -x test 제거

      # 4. docker hub로 build & push
      - name: docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/issuetracker-be:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/issuetracker-be:latest

  # job[2]: FRONTEND -> docker hub로 build & push
  fe-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.FE_WORKING_DIR }}
    steps:

      # 1. Source 단계
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # Node 세팅
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # 2. docker hub로 build & push
      - name: docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/issuetracker-fe:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/issuetracker-fe:latest

  # job[3]: nginx -> docker hub로 build & push
  nginx-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.NGINX_WORKING_DIR }}
    steps:
      # 1. Source 단계
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # 2. docker hub로 build & push
      - name: docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/issuetracker-nginx:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/issuetracker-nginx:latest

  # job[4]: EC2에서 docker 이미지 pull하고 실행
  SSH-Transfer:
    needs: [be-deploy, fe-deploy, nginx-deploy]
    runs-on: ubuntu-latest
    steps:
      - name: SSH Transfer
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker-compose down -v
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/issuetracker-fe:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/issuetracker-be:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/issuetracker-nginx:latest
            sudo docker-compose up -d
            sudo docker image prune -a -f