# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ "dev", "release" ]

permissions:
  contents: read

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      ## JDK 설정
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      # application-prod.yml 파일을 생성하여 설정
      - name: make application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yml
          ls -l
      # gradlew 실행을 위해서 실행 권한을 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      # Gradle을 이용하여 빌드 수행
      - name: Build with Gradle
        run: ./gradlew build -x test
      # 도커 이미지 빌드하여 도커 허브에 푸시하기
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t app .
          docker tag app ${{ secrets.DOCKER_USERNAME}}/issue_tracker:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/issue_tracer:latest
  cd-pipeline:
    needs: build-image
    name: continuos deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      # .env 파일을 생성하여 설정
      - name: make .env
        run: |
          touch .env
          echo "${{ secrets.DATASOURCE_ENV }}" > .env
      # 생성한 파일 목록 확인
      - name: print pwd, ls
        run: |
          pwd
          ls -l
      # 환경변수 파일을 EC2에 업로드
      - name: copy .env via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: ".env"
          target: "/home/ec2-user/"
      # docker-compose.yml 파일을 EC2에 업로드
      - name: copy docker-compose file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/ec2-user/"
      # docker-compose 실행
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }} # pem 키
          port: 22
          script: |
            sudo chmod 666 /var/run/docker.sock
            docker stop $(docker ps -a -q) 2>/dev/null
            docker-compose pull && docker-compose up -d
